:chap_num: 1
:prev_link: 00_intro
:next_link: 02_program_structure

= Значения и типы =

[quote, учитель Юнь-Ма, Книга Программ]
____
За поверхностью машины двигается программа. Без напряжений и
колебаний, она расширяется и сжимается. В полной гармонии электроны
разбегаются и перегруппировываются. Фигуры на мониторе -- лишь волны
на поверхности воды. Суть остается невидимой под ними.
____

(((data)))(((bit)))(((memory)))В мире компьютера все -- лишь
данные. Мы можем читать данные, изменять данные, создавать новые
данные. Но все, что не является данными, попросту не существует. И все
эти данные хранятся как длинные цепочки бит, и значит, фундаментально
являются одной и той же сущностью.

Битами могут быть все двухзначные штуки, такие как вкл/выкл, один/ноль,
открыто/закрыто, есть/нету, и обычно все эти значения описываются как
Ноль и Один: 0/1. В компьютере, они представлены как большой/маленький
электрический заряд, сильный/слабый сигнал, или как отражающая/пустая
точка на рабочей поверхности компакт-диска. Любая порция дискретной
информации может быть сведена к единицам и нулям, и представлена в
виде бит.

Например, как мы можем записать число тринадцать, используя только 0 и
1? Простой способ работает так же, как и обычная десятичная запись
числа. Вместо десяти разных цифер (0,1,2,3,4,5,6,7,8,9) у нас есть
две: 0 и 1, и значимость каждого разряда увеличивается в 2 раза (вместо в
10 раз) справа налево. Вот показаны биты, которые представляют число
13, со значениями, которые вкладывает каждый бит:

----
   0   0   0   0   1   1   0   1
 128  64  32  16   8   4   2   1
----

То есть это цепочка бит 00001101, или 8 + 4 + 1, что равно 13.

Степени двойки (1,2,4,8,16,32,64,128,...) выглядят поначалу немного
странно по сравнению со степенями десяти (1,10,100,1000,10000), но для
компьютера дело обстоит ровно наоборот, и как только немного
привыкаешь к ним, они становятся чрезвычайно удобными рычажками
взаимодействия с компьютером.

== Значения ==

Представьте море бит. Или океан. Типичный мовременный компьютер
помещает тридцать миллиардов бит в быстрой, временной
памяти. Постоянная, медленная, внешняя память (жесткий диск или другой
эквивалент) может иметь объем еще на несколько порядков больше.

image::../img/bit-sea.png[alt="The Ocean of Bits"]

Чтобы работать с такими количествами бит и не потеряться в них, вы
можете разбить их на блоки, которые представляют кусочки значимой
информации. В окружении JavaScript, эти кусочки называются
_((значения))_. И хотя все значения сделаны из бит, у каждого значения
своя определенная роль. У каждое значение принадлежит определенному
_((типу))_, который определяет роль этого значения. Есть шесть
основных типов значений в JavaScript: числа (number), строки (string),
логические (boolean), объекты (object), функции (function), и
специальный тип, который называется "значение неопределено"
(undefined).

(((garbage collection)))Чтобы создать значение, нужно просто назвать
его. Это очень удобно. Не нужно собирать строительный материал для
ваших значений или платить за них. Нужно просто его позвать, и
_оп-ля_, оно у вас. Они не создаются из ничего, конечно. Каждое
значение должно где-то храниться, и если использовать какое-то
гигантское количество их в какой-то момент, у вас могут закончиться
все свободные биты. Эта проблема возникает, только если они все вам
нужны одновременно. Как только какое-то значение вам больше не нужно,
оно растворится, оставляя после себя те биты, из которых оно состояло,
и которые преврятятся в строительный материал для новых поколений
значений.

Эта глава знакомит вас с атомарными, простейшими элементами программ
JavaScript: простейшими типами значений и операторами, которые могут с
ними работать.

== Числа ==

(((Number type)))Значения _числового_ (_number_) типа, как это не
удивительно, числа. В JavaScript они записываются как числа. (это
можно сделать несколькими способами, здесь видим самый простой):

[source,javascript]
----
13
----

(((binary)))Написанное в программе, эта запись повлечет возникновение
битового паттерна для числа 13 в памяти компьютера.

На каждое число (или на каждое _значение числового типа_), JavaScript
использует фиксированное количество бит. А именно, 64. Значит,
количество разных последовательностей бит, выделенных для чисел,
конечно. Это похоже на число разрядов в карманном калькуляторе. При
помощи, например, 8ми десятичный разрядов в калькуляторе, мы можем
представить числа от 0 до 99999999, т.е. 10^8^ разных чисел. Таким же
образом, если у нас есть 64 двоичных разряда, мы можем представить
2^64^ разных числа. Что составляет около 18 квинтильонов (18 с 18
нулями после). И это довольно много.

Раньше память компьютера была гораздо меньше, и люди использовали
кусочки по восемь и шестнадцать бит для своих чисел. Тогда было легко
случайно _переполнить_ эти маленькие числа, таким числом, которое не
помещается в данное количество бит. Сегодня, когда даже мобильные
компьютеры имеют _много_ памяти, мы можем спокойно использовать
кусочки по 64 бита для чисел, и это значит, что нужно помнить о
переполнении только для действительно астрономически больших чисел.

Не все целые числа до 18 квинтильенов помещаются в _тип_ число
JavaScript. Эти же 64 бита хранят и отрицательные числа. Так что один
бит нужен, чтобы представлять знак числа. Более сложен случай дробных
чисел. И они тоже должны быть записаны в этих же 64 битах. Это
делается так. Некоторые из 64 бит используются, чтобы хранить
положение дробной точки. Так что, на самом деле, самое большое целое
число, которое может быть сохранено таким способом, порядка девяти
квадриллионов (15 нулей). Все еще довольно много.

Дробные числа записываются при помощи точки:

[source,javascript]
----
9.81
----

(((scientific notation)))Для очень больших или очень маленьких чисел
можно также использовать экспоненциальную запись. Нужно добавить "e",
и после нее записать показатель степени 10 для числа:

[source,javascript]
----
2.998e8
----

Это равно 2.998 × 10^8^ = 299800000.

Вычисления с целыми (integer) числами, меньшими чем упомянутые 9
квадриллионов, гарантированно точны. К сожалению, вычисления с
дробными числами чаще всего _не_ точны. Как и число π (пи) не может
быть точно выражено при помощи конечного числа десятичных разрядов,
многие числа теряют точность, когда для их хранения доступны только 64
бита. А жаль. Впрочем, это причиняет практические проблемы лишь в
некоторых особенных ситуациях. Важно помнить об этом, и относиться к
числам с дробной частью как к некоторым приближениям, а не как к
точным значениям.

=== Арифметика ===

(((operator)))(((arithmetic)))(((addition)))(((multiplication)))
Основная вещь, которую можно делать с числами -- это
арифметика. Арифметические операции, такие как сложение или умножение,
принимают два численных значения и делают из них новое числовое
значение. Вот как это может выглядеть в JavaScript:

[source,javascript]
----
100 + 4 * 11
----

(((\* operator)))(((+ operator)))Символы “+” и “*” называются
_операторами_. Оператор “+” обозначает сложение, “*” --
умножение. Написание оператора (((application,of operators)))применяет
его к этим значениям и создает новое значение, с результатом
соответствующего вычисления.

(((parentheses)))Что обозначает приведенный выше пример, "сложить 4 и
100, и умножить результат на 11", или умножение должно выполниться
перед сложением? Как вы могли подумать, умножение выполняется
первым. Но, как в математике, это можно изменить, окружив сложение в
круглые скобки (да, бывают и другие скобки, и применяются они
по-другому):

[source,javascript]
----
(100 + 4) * 11
----

(((division)))(((subtraction)))(((- operator)))(((/ operator)))Для
вычитания есть оператор "-", и есть оператор "/" для деления.

Когда операторы встречаются вместе без скобок, порядок, в котором
производятся вычисления, определяется _((приоритетом вычисления))_
операторов. В примере видно, что умножение происходит перед
сложением. Приоритет "/" такой же, как у "*". Аналогично, приоритет
"-" такой же, как у "+". Когда операторы с одинаковым приоритетом
встречаются друг за другом (как в `1 - 2 + 1`), они применяются слева
направо.

Эти правила приоритетов не должны вас сильно беспокоить. Когда есть
сомнения, просто добавьте скобок.

(((remainder operation)))(((% operator)))Есть еще один арифметический
оператор, который не так узнаваем как предыдущие. Оператор "%"
вычисляет _остаток_ от деления. `X % Y` -- остаток от деления X на
Y. Например, `123 % 100` дает `23`, `12 % 2` дает `0`. Приоритет
_остатка_ такой же, как у умножения и деления.

=== Особенные числа ===

В JavaScript есть три особенных числовых значения, которые принадлежат
к _числовому типу_, но ведут себя не как обычные, нормальные числа.

Первые два -- это `Infinity` (бесконечность) и `-Infinity`. Они,
ожидаемо, представляют плюс- и минус- бесконечности. Например,
`Infinity - 1` даст `Infinity`, как и `Infinity/2`, и подобное. Не
полагайтесь сильно на такие "бесконечные" вычисления. Они не всегда
математически обоснованы, и быстро приведут к третьему особенному
числовому значению: `NaN`.

`NaN` -- сокращенние от "Not a Number" -- "не-число". Хотя это
значение принадлежит к _числовому типу_. Это значение можно получить,
если вычислить `0 / 0` (ноль деленный на ноль), `Infinity - Infinity`,
или из какого-то другого вычисления, связанного с числами, которое не
производит разумный, значащий результат.

== Строки ==

(((String type)))(((textual data)))(((character)))Следующий базовый
тип значений (данных) -- _строка_. Этот, строковой, тип используется
для хранения текста, текстовых данных. Строки записываются в как
содержание строки, окруженное кавычками.

[source,javascript]
----
"Patch my boat with chewing gum"
'Monkeys wave goodbye'
----

(((quoting (of strings))))Для кавычения строк можно использовать и
двойные, и одинарные кавычки, но открывающая и закрывающая кавычка
должны совпадать.



(((escaping,in strings)))(((newline)))Между кавычек можно написать
почти все, что угодно, и JavaScript из этого сделает строковое
значение. Но есть несколько символов, с ними не все так
просто. Как можете представить, сложно написать кавычку внутри
кавычек. _Перевод строки_ (_newline_) (такой символы, которые получаются, когда
нажимаете `enter`) так же не могут быть написаны между кавычек. Строка
должна занимать, извините, каламбур, одну строку.

(((backslash)))Чтобы было можно все же писать такие буквы в строках,
используется вот такое обосзачение. Когда в закавыченном тексте
встречается _обратный слэш_ ("\"), он обозначает, что следующий за ним
символ -- особенный. Так, идущая после бэкслеша кавычка не завершит
строку, а будет частью ее текстового значения; идущий после "\" символ
"n" обозначает перевод строки, который так же становится частью этого
строкового значения. Возмем такую строку:

[source,javascript]
----
"This is the first line\nAnd this is the second"
----

Но текст, который в ней содержится, на самом деле таков:

----
This is the first line
And this is the second
----

Конечно, есть случаи, когда нужно, чтобы "\" был просто собой, был
частью текстового значения. Для этого... Вобщем, следующий после "\"
символ "\" обозначает _обычный_ "\". Вот как может быть записана
строка “`Перевод строки пишется так: "\n"`”

[source,javascript]
----
"Перевода строки пишется так: \"\\n\"."
----

(((+ operator)))(((concatenation)))Строки не можем в арифметическом
смысле делить, умножать, или вычитать, но оператор "+" может быть
использован. Он вычисляет не сумму в арифметическом смысле, а
__склеивает__ -- соединяет две строки в одну. Такая запись дает
строковое значение "склеиваем":

[source,javascript]
----
"с" + "кле" + "и" + "ваем"
----

Есть другие способы делать действия со строками, мы их обсудим, когда
доберемся до _методов_ в главе 4.

== Унарные операторы ==

(((operator)))(((typeof operator)))(((type)))Не все операторы -
одиночные символы. Некоторые пишутся как слова. Например, оператор
`typeof`, который дает строковое значение с названием типа. Т.е. вы
ему даете некоторое значение, а он вам -- строку с названием типа
этого значения.

[source,javascript]
----
console.log(typeof 4.5)
// → number
console.log(typeof "x")
// → string
----

Мы будем использовать `console.log` в примерах, чтобы увидеть
результат вычисления. Когда вы выполняете такой код, полученное
значение будет показано на экране. Хотя то, как оно будет показано,
зависит от того, в каком окружении JavaScript вы выполняете этот код.

(((- operator)))(((binary operator)))(((unary operator)))Другие
операторы, которые мы видели, работают на двух значениях. `typeof` же
принимает только одно значение. Опереторы, которые принимают два
значения, называются _бинарными_, а те, которые принимают одно
значение, называются _унарными_. Оператор "-" (минус) может быть
использован и как бинарный, и как унарный:

[source,javascript]
----
console.log(- (10 - 2))
// → -8
----

== Логические (Boolean) значения ==

(((Boolean type)))(((operator)))(((true)))(((false)))Часто может
понадобится значение, которое различает между двумя возможностями,
такими как "да" и "нет", или "вкл" и "выкл". Для этого в JavaScript
есть _логический_ тип (_boolean_), у которого есть только два
возможных значения: true (правда) и false (ложь), и эти значения
записываются просто как эти английские слова:

[source,javascript]
----
true
false
----

У этих значений есть своя арифметика. Есть действия "не" (унарный оператор
"!"), действие И (бинарный оператор "&&"), действие ИЛИ (бинарный
оператор "||").

[source,javascript]
----
console.log(!true)
// → false

console.log(false || true)
// → true

console.log(false && true)
// → false
----

=== Comparisons ===

Вот, например, способ, как можно создать логическое здачение:

[source,javascript]
----
console.log(3 > 2)
// → true
console.log(3 < 2)
// → false
----

(((> operator)))(((< operator)))(((greater than)))(((less
than)))(((comparing)))The “>” and “<” signs are the traditional symbols
for “is greater than” and “is less than”, respectively. They are binary operators,
applying them results in a boolean value that indicates
whether they hold true in this case.

Strings can be compared in the same way:

[source,javascript]
----
console.log("Aardvark" < "Zoroaster")
// → true
----

The way strings are ordered is more or less alphabetic: uppercase
letters are always “less” than lowercase ones, so `"Z" < "a"` is
true, and nonalphabetic characters (“!”, “-”, and so on) are also
included in the ordering. The actual comparison is
based on the _((Unicode))_ standard. This standard assigns a
number to virtually every character one would ever need, including
characters from Greek, Arabic, Japanese, Tamil, and so on. Having such
numbers is practical for storing strings inside a computer—you can
represent them as a sequence of numbers. When comparing strings,
JavaScript goes over them from left to right, comparing the numeric
codes of the characters one by one.

(((>= operator)))(((<= operator)))(((== operator)))(((!=
operator)))Other similar operators are “>=” (greater than or equal
to), “\<=” (less than or equal to), “==” (equal to), and
“!=” (not equal to).

[source,javascript]
----
console.log("Itchy" != "Scratchy")
// → true
----

There is only one value in JavaScript that is not equal to itself, and
that is `NaN` (not-a-number).

[source,javascript]
----
console.log(NaN == NaN)
// → false
----

`NaN` is supposed to denote the result of a nonsensical computation, and 
as such, it isn't equal to the result of any _other_ nonsensical computations.

=== Logical operators ===

(((logical operators)))There are also some operations that can be
applied to boolean values themselves. JavaScript supports three
logical operators: _and_, _or_, and _not_. These can be used to
“reason” about booleans.

(((&& operator)))The “&&” operator represents logical _and_. It is a
binary operator, and its result is true only if both the values
given to it are true.

[source,javascript]
----
console.log(true && false)
// → false
console.log(true && true)
// → true
----

(((|| operator)))The “||” operator denotes logical _or_. It produces
true if either of the values given to it is true:

[source,javascript]
----
console.log(false || true)
// → true
console.log(false || false)
// → false
----

(((negation)))(((! operator)))_Not_ is written as an exclamation mark
(“!”). It is a unary operator that flips the value given to it—`!true`
produces `false` and `!false` gives `true`.

(((precedence)))When mixing these boolean operators with arithmetic
and other operators, it is not always obvious when parentheses are
needed. In practice, one can usually get by with knowing that of the
operators we have seen so far, “||” has the lowest precedence, then
comes “&&”, then the comparison operators (“>”, “==”, and so on), and
then the rest. This order has been chosen such that, in typical
expressions like the one below, as few parentheses as possible are
necessary.

[source,javascript]
----
1 + 1 == 2 || 10 * 10 <= 100
----

(((ternary operator)))(((?: operator)))The last logical operator I
want to discuss is not unary, not binary, but _ternary_, operating on
three values. It is written with a question mark and a colon, like
this:

[source,javascript]
----
console.log(true ? 1 : 2);
// → 1
console.log(false ? 1 : 2);
// → 2
----

This one is called the conditional operator (or sometimes just
“ternary operator”, since it is the only such operator in the
langauge). The value on the left of the question mark “picks” which of
the other two values will come out. When it is true, the middle value
is chosen, when it is false, the right-hand value comes out.

== Undefined values ==

(((undefined)))(((null)))There are two special values, written `null`
and `undefined`, that are used to denote the absence of a meaningful
value. They are themselves values, but they carry no
information.

Many operations in the language which don't produce a meaningful value
(we'll see some in the next chapter) will yield `undefined`, simply
because they have to yield _some_ value.

The difference in meaning between `undefined` and `null` is an accident 
of JavaScript's design, and it doesn't matter most of the time. In the cases
where you actually have to concern yourself with these values, I
recommend treating them as interchangeable (more on that in a moment).

== Automatic type conversion ==

(((type conversion)))In the introduction, I mentioned that JavaScript
goes out of its way to accept almost any program you give it, even
programs that do odd things. This is nicely demonstrated by these
expressions:

[source,javascript]
----
console.log(8 * null)
// → 0
console.log("5" - 1)
// → 4
console.log("5" + 1)
// → 51
console.log("five" * 2)
// → NaN
console.log(false == 0)
// → true
----

When an operator is applied to the “wrong” type of value, it will
quietly convert that value to the type it wants, using a set of rules
that often aren't what you want or expect. This is called _type
coercion_. So the `null` in the first expression becomes `0` and the
`"5"` in the second expression becomes `5` (from string to number).
Yet in the third expression, `+` tries string concatenation before
numeric addition, and so the `1` is converted to `"1"` (from number to
string).

When something that doesn't map to a number in an obvious way (such as
`"five"` or `undefined`) is converted to a number, the value `NaN` is
produced. Further arithmetic operations on `NaN` keep on producing
`NaN`, so if you find yourself getting one of those in an unexpected
place, look for accidental type conversions.

(((== operator)))When comparing values of the same type using “==”,
the outcome is easy to predict: you should get true when both
values are the same. But when the types differ, JavaScript uses a
complicated and confusing set of rules to determine what to do. I will
not explain them precisely, but in most cases, it just tries to convert
one of the values to the other value's type. However, when `null`
or `undefined` occurs on either side of the operator, it produces
true only if both sides are `null` or `undefined`.

That last piece of behavior is often very useful. When you want to
test whether a value has a real value instead of `null`
or `undefined`, you can simply compare it to `null` with the “==” (or
“!=”) operator.

(((=== operator)))(((!== operator)))But what if you want to test
whether something refers to the precise value `false`? The rules for
converting strings and numbers to boolean values state that `0`,
`NaN`, and the empty string (`""`) count as `false`, while all the other
values count as true. Because of this, expressions like `0 == false`
and `"" == false` are also true. For cases like this, where you do
_not_ want any automatic type conversions to happen, there are two
extra operators: “===” and “!==”. The first tests whether a value is
precisely equal to the other, and the second tests whether it is not
precisely equal. So `"" === false` is false as expected.

I recommend using the three-character comparison operators defensively, to
prevent unexpected type conversions from tripping you up. But when you're
certain the types on both sides will be the same, there is no problem with 
using the shorter operators.

=== Short-circuiting of logical operators ===

(((|| operator)))(((&& operator)))(((?: operator)))(((operator)))The
logical operators “&&” and “||” handle values of different types in a
peculiar way. They _will_ convert the value on their left side to
boolean type in order to decide what to do, but depending on the
operator and the result of that conversion, they either return the
_original_ left-hand value, or the right-hand value.

The “||” operator, for example, will return the value to its left when that can be
converted to true, and the value on its right otherwise. This conversion works as 
you'd expect for boolean values and should do something analogous for
values of other types.

[source,javascript]
----
console.log(null || "user")
// → user
console.log("Karl" || "user")
// → Karl
----

This functionality allows the `||` operator to be used as a way 
to fall back on a default value. If you give it an expression that might produce
an empty value on the left, the value on the right will be used as a replacement
in that case.

The “&&” operator works similarly, but the other way around. When the
value to its left is something that converts to false, it returns that
value, and otherwise it returns the value on its right.

(((short-circuit evaluation)))Another important property of these two
operators is that the expression to their right is evaluated only when
necessary. In the case of `true || X`, no matter what `X` is—even if
it's an expression that does something __terrible__—the result will be
true, and `X` is never evaluated. The same goes for `false && X`,
which is false, and will ignore `X`. This is called _short-circuit evaluation_.

The conditional operator works in a similar way. The first expression
is always evaluated, but the second or third value, the one that is
not picked, is also not evaluated.

== Summary ==

We looked at four types of JavaScript values in this chapter: numbers,
strings, booleans, and undefined values. 

Such values are created by typing in their name (`true`, `null`) or
value (`13`, `"abc"`). You can combine and transform values with operators. We saw binary 
operators for arithmetic (“+”, “-”, “*”, “/”,
and “%”), string concatenation (“+”), comparison (“==”, “!=”,
“===”, “!==”, “<”, “>”, “\<=”, “>=”), and logic (“&&”, “||”), as well
as several unary operators (“-” to negate a number, “!” to negate
logically, and `typeof` to find a value's type).

This gives you enough information to use JavaScript as a pocket
calculator, but not much more. The next chapter will start tying these
basic expressions together into basic programs.
